# -*- coding: utf-8 -*-
"""Face_detectionpythonProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lYD9rFnqpKLS4HMmLGETuHBsKQCKb8PU
"""

import cv2
import matplotlib.pyplot as plt
import numpy as np
import mediapipe as mp

pip install mediapipe

pip install opencv-python

# Create a list of image paths
image_paths = ["five_faces.jpeg",
               "one_face.jpeg",
               "two_faces.jpeg"]

# Loading the pre-trained Haar Cascade classifier that is built into OpenCV
face_classifier = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

# Create a figure
fig = plt.figure(figsize=(12, 12))

# Loop through the image paths
for i, image_path in enumerate(image_paths):
  # Read the image
  image = cv2.imread(image_path)

  # Check if the image was loaded correctly
  if image is None:
    print(f"Error: Could not load image {image_path}")
    continue

  # Convert the image to grayscale
  gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

  # Detect faces in the image
  faces = face_classifier.detectMultiScale(gray_image, 1.3, 5)

  # Draw a Bounding Box around the faces in the image
  for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 7)

  # Converting the image frome BGR to RGB
  image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

  # Add a subplot for the image
  # Change the arguments to create a 2x2 grid
  fig.add_subplot(2, 2, i + 1)

  # Displaying the Image
  plt.imshow(image_rgb)
  plt.axis('off')
  plt.title(f"Image {i + 1}")

# Display the figure
plt.show()

# Initialize face detection model
mp_face_detection = mp.solutions.face_detection
face_detection = mp_face_detection.FaceDetection(model_selection=0, min_detection_confidence=0.5)

# Initialize drawing utilities
mp_drawing = mp.solutions.drawing_utils

# Create a list of image paths
# Removed the leading '/' from the image paths
image_paths = ["five_faces.jpeg",
               "one_face.jpeg",
               "two_faces.jpeg"]

# Create a figure
fig = plt.figure(figsize = [12, 12])

# Loop through the image paths
for i, image_path in enumerate(image_paths):
  # Read the image
  image = cv2.imread(image_path)

  # Check if the image was loaded correctly
  if image is None:
    print(f"Error: Could not load image {image_path}")
    continue

  # Convert the image to RGB
  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

  # Perform face detection
  results = face_detection.process(image)

  # Draw bounding boxes on output image
  output_image = image.copy()
  if results.detections:
    for detection in results.detections:
      mp_drawing.draw_detection(output_image, detection,
                               bbox_drawing_spec=mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=7))

  # Add a subplot for the image
  # Change the arguments to create a 2x2 grid
  fig.add_subplot(2, 2, i + 1)

  # Show the image
  plt.imshow(output_image)
  plt.axis('off')
  plt.title(f"Image {i + 1}")

# Display the figure
plt.show()

